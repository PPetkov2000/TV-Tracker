{"version":3,"file":"static/js/643.87c179db.chunk.js","mappings":"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","sources":["components/Message.js","components/Episodes.js","components/Cast.js","pages/ShowInfo.js","services/api/TVMazeApi.js","utils/defaultImage.js","utils/itemsLimit.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React from \"react\";\n\nconst Message = ({ variant, children }) => {\n  return <h3 className={`alert-${variant}`}>{children}</h3>;\n};\n\nexport default Message;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Episodes = ({ episodes }) => {\r\n  return (\r\n    <section className=\"episodes\">\r\n      <div className=\"content-wrapper\">\r\n        <h2 className=\"episodes__title\">Previous Episodes</h2>\r\n        <table className=\"episodes__table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Episode</th>\r\n              <th>Name</th>\r\n              <th>Airdate</th>\r\n              <th>Airtime</th>\r\n              <th>Runtime</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {episodes.map((episode) => (\r\n              <tr key={episode.id}>\r\n                <td>\r\n                  {episode.season}x\r\n                  {episode.number < 10 ? `0${episode.number}` : episode.number}\r\n                </td>\r\n                <td>\r\n                  <Link to={`/episodes/${episode.id}`}>{episode.name}</Link>\r\n                </td>\r\n                <td>{episode.airdate}</td>\r\n                <td>{episode.airtime}</td>\r\n                <td>{episode.runtime} min</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Episodes;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { defaultImage } from '../utils/defaultImage'\r\n\r\nconst Cast = ({ cast }) => {\r\n  return (\r\n    <section className=\"cast\">\r\n      <div className=\"content-wrapper\">\r\n        <h2 className=\"cast__title\">Cast</h2>\r\n        <ul className=\"cast__list\">\r\n          {cast.map(({ character, person }) => (\r\n            <li key={person.id} className=\"cast__list-item\">\r\n              <img\r\n                src={character.image ? character.image.medium : defaultImage}\r\n                alt={character.name}\r\n                className=\"cast__list-item-image\"\r\n                loading=\"lazy\"\r\n              />\r\n              <div>\r\n                <Link to={`/people/${person.id}`}>\r\n                  <h3 className=\"cast__list-item-title\">{person.name}</h3>\r\n                </Link>\r\n                <p className=\"cast__list-item-text\">\r\n                  as <Link to={`/characters/${character.id}`}>{character.name}</Link>\r\n                </p>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Cast\r\n","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useQuery } from 'react-query'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Episodes from '../components/Episodes'\r\nimport Cast from '../components/Cast'\r\nimport { defaultImage } from '../utils/defaultImage'\r\nimport { episodesLimit, castLimit } from '../utils/itemsLimit'\r\nimport TVMazeApi from '../services/api/TVMazeApi'\r\n\r\nconst ShowInfo = () => {\r\n  const params = useParams()\r\n  const showDetailsQuery = useQuery({\r\n    queryKey: ['shows', params.id],\r\n    queryFn: () => TVMazeApi.getShowDetails(params.id),\r\n    retry: 5,\r\n    enabled: !!params.id,\r\n  })\r\n  const show = showDetailsQuery?.data?.data\r\n\r\n  return showDetailsQuery.isLoading ? (\r\n    <Loader />\r\n  ) : showDetailsQuery.isError ? (\r\n    <Message variant=\"red\">{showDetailsQuery.error.message}</Message>\r\n  ) : !show ? (\r\n    <Message variant=\"info\">There is no such show</Message>\r\n  ) : (\r\n    <>\r\n      <section className=\"show-info\">\r\n        <div className=\"content-wrapper\">\r\n          <div>\r\n            <img src={show.image ? show.image.medium : defaultImage} alt={show.name} className=\"show-info__image\" loading=\"lazy\" />\r\n            <h3 className=\"show-info__name\">{show.name}</h3>\r\n          </div>\r\n          <article className=\"show-info__about\">\r\n            <h2 className=\"show-info__about-title\">Show Info</h2>\r\n            <p className=\"show-info__about-text\">\r\n              <strong>Schedule:</strong> {show.schedule.days[0]} at {show.schedule.time} ({show.runtime} min)\r\n            </p>\r\n            <p className=\"show-info__about-text\">\r\n              <strong>Status:</strong> {show.status}\r\n            </p>\r\n            <p className=\"show-info__about-text\">\r\n              <strong>Show Type:</strong> {show.type}\r\n            </p>\r\n            <p className=\"show-info__about-text\">\r\n              <strong>Genres:</strong> {show.genres.join(' | ')}\r\n            </p>\r\n            <p className=\"show-info__about-text\">\r\n              <strong>Language:</strong> {show.language}\r\n            </p>\r\n            <p className=\"show-info__about-text\">\r\n              <strong>Episodes:</strong> {show._embedded.episodes.length}\r\n            </p>\r\n            <div dangerouslySetInnerHTML={{ __html: show.summary }} className=\"show-info__about-summary\"></div>\r\n          </article>\r\n        </div>\r\n      </section>\r\n      <Episodes episodes={[...show._embedded.episodes.slice(show._embedded.episodes.length - episodesLimit).reverse()]} />\r\n      <Cast cast={show._embedded.cast.slice(0, castLimit)} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ShowInfo\r\n","import axios from 'axios'\r\n\r\nconst apiInstance = axios.create({\r\n  baseUrl: 'https://api.tvmaze.com',\r\n  headers: { 'Content-Type': 'application/json' },\r\n})\r\n\r\nconst baseUrl = 'https://api.tvmaze.com'\r\n\r\nconst endpoints = {\r\n  getShows() {\r\n    return apiInstance.get(`${baseUrl}/shows`)\r\n  },\r\n  getShowsByName(name = '') {\r\n    return apiInstance.get(`${baseUrl}/search/shows?q=${name}`)\r\n  },\r\n  getShowDetails(id) {\r\n    return apiInstance.get(`${baseUrl}/shows/${id}?embed[]=episodes&embed[]=cast`)\r\n  },\r\n  getEpisodeDetails(id) {\r\n    return apiInstance.get(`${baseUrl}/episodes/${id}?embed=show`)\r\n  },\r\n  getCharacterDetails(id) {\r\n    return apiInstance.get(`${baseUrl}/characters/${id}?embed=castcredits`)\r\n  },\r\n  getPersonDetails(id) {\r\n    return apiInstance.get(`${baseUrl}/people/${id}`)\r\n  },\r\n  getCastCredits(id) {\r\n    return apiInstance.get(`${baseUrl}/people/${id}/castcredits?embed=show`)\r\n  },\r\n}\r\n\r\nexport default endpoints\r\n","export const defaultImage = \"../images/no-image.jpg\";","export const showsLimit = 8;\nexport const episodesLimit = 5;\nexport const castLimit = 5;\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nexport { _toConsumableArray as default };","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nexport { _arrayWithoutHoles as default };","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nexport { _iterableToArray as default };","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _nonIterableSpread as default };"],"names":["variant","children","className","episodes","map","episode","season","number","to","id","name","airdate","airtime","runtime","cast","character","person","src","image","medium","defaultImage","alt","loading","params","useParams","showDetailsQuery","useQuery","queryKey","queryFn","TVMazeApi","retry","enabled","show","data","isLoading","Loader","isError","Message","error","message","schedule","days","time","status","type","genres","join","language","_embedded","length","dangerouslySetInnerHTML","__html","summary","slice","episodesLimit","reverse","castLimit","apiInstance","axios","baseUrl","headers","endpoints","getShows","get","getShowsByName","getShowDetails","getEpisodeDetails","getCharacterDetails","getPersonDetails","getCastCredits","showsLimit","_toConsumableArray","r","Array","isArray","arrayLikeToArray","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}